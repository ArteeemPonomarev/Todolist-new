{"version":3,"sources":["serviceWorker.ts","api/types.ts","api/todolist-api.ts","features/CommonActions/App.ts","utils/error-utils.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","utils/redux-utils.ts","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/TodoList.tsx","features/Auth/selectors.tsx","features/TodolistsList/ToodolistsList.tsx","features/TodolistsList/index.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","features/Auth/authReducer.ts","features/Auth/Login.tsx","features/Auth/index.tsx","features/Application/selectors.ts","features/Application/app-reducer.ts","features/Application/index.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todoApi","get","title","post","todolistId","delete","put","taskId","model","authApi","data","appActions","setAppStatus","createAction","setAppError","handleAsyncServerAppError","thunkAPI","showError","dispatch","error","messages","length","status","rejectWithValue","errors","fieldsErrors","handleAsyncServerNetworkError","message","undefined","fetchTodolistsTC","createAsyncThunk","param","a","res","todolists","deleteTodolistTC","changeTodolistEntityStatus","entityStatus","resultCode","id","createTodolistTC","todolist","item","updateTodolistTitleTC","asyncActions","slice","createSlice","name","initialState","reducers","changeTodolistFilter","state","action","index","findIndex","tl","payload","todoListID","filter","newFilterValue","extraReducers","builder","addCase","fulfilled","map","splice","unshift","actions","fetchTasks","tasks","items","removeTask","createTask","updateTask","getState","task","find","t","apiModel","deadline","description","priority","startDate","asyncTodolistsActions","forEach","todoListId","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trimmedTitle","trim","TextField","variant","value","onKeyPress","e","key","onChange","currentTarget","label","helperText","IconButton","onClick","color","AddBox","EditableSpan","props","console","log","editMode","setEditMode","autoFocus","onBlur","changeTitle","onDoubleClick","useAppDispatch","useDispatch","useActions","useMemo","bindActionCreators","Task","tasksActions","onClickHandler","useCallback","onChangeHandler","checked","Completed","New","onTitleChangeHandler","Checkbox","Delete","TodoList","demo","todolistsActions","getTasksForTodoList","useEffect","addTaskCallback","helper","thunk","resultAction","rejected","errorMessage","removeTodoList","changeTodolistTitle","onFilterButtonClickHandler","renderFilterButton","buttonFilter","text","Button","style","listStyle","padding","selectIsLoggedIn","auth","isLoggedIn","TodolistsList","todoLists","useSelector","addTodolistCallback","todolistComponents","allTodolistTasks","Grid","Paper","elevation","container","spacing","to","todolistsAsyncActions","todolistsSlice","tasksAsyncActions","tasksSlice","todolistsReducer","reducer","tasksReducer","Alert","ErrorSnackbar","app","isOpen","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","login","response","logout","setIsLoggedIn","authReducer","Login","formik","useFormik","initialValues","email","password","rememberMe","onSubmit","values","formikHelpers","authActions","setFieldError","field","validate","test","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","selectStatus","selectIsInitialized","isInitialized","initializeApp","appReducer","App","authSelectors","logoutHandler","className","AppBar","position","Toolbar","display","justifyContent","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","exact","render","from","top","textAlign","width","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.01524ff1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type FieldErrorType = { field: string; error: string };\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<FieldErrorType>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\nexport type AuthMeResponseData = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}","import axios from \"axios\"\r\nimport {TodolistType, ResponseType, GetTasksResponse, TaskType, UpdateTaskModelType, LoginParamsType, AuthMeResponseData} from \"./types\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '9b6aada9-34d3-4135-a32f-7e9aacf37623'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todoApi = {\r\n    getTodos() {\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    createTodo(title: string) {\r\n        return instance.post<ResponseType<{item: TodolistType}>>(`todo-lists`, {title})\r\n    },\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodoTitle(todolistId: string, title: string) {\r\n        return instance.put<ResponseType<{}>>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n }\r\n\r\nexport const authApi = {\r\n    login (data: LoginParamsType) {\r\n        return instance.post<ResponseType<{userId: number}>>(`auth/login`, data)\r\n    },\r\n    autMe () {\r\n        return instance.get<ResponseType<AuthMeResponseData>>(`auth/me`)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    }\r\n}\r\n","import {createAction} from '@reduxjs/toolkit'\r\nimport {RequestStatusType} from '../Application/app-reducer';\r\n\r\n\r\nconst setAppStatus = createAction<{status: RequestStatusType}>('appActions/setAppStatus')\r\nconst setAppError = createAction<{error: string | null}>('appActions/setAppError')\r\n\r\nexport const appActions = {\r\n    setAppStatus,\r\n    setAppError\r\n}","import {ResponseType} from \"../api/types\";\r\nimport { appActions } from \"../features/CommonActions/App\";\r\nimport {AxiosError} from 'axios';\r\n\r\n// original type:\r\n// BaseThunkAPI<S, E, D extends Dispatch = Dispatch, RejectedValue = undefined>\r\ntype ThunkAPIType = {\r\n    dispatch: (action: any) => any\r\n    rejectWithValue: Function\r\n}\r\n\r\n\r\nexport const handleAsyncServerAppError = <D>(data: ResponseType<D>,\r\n                                             thunkAPI: ThunkAPIType,\r\n                                             showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appActions.setAppError({error: data.messages.length ? data.messages[0] : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n    return thunkAPI.rejectWithValue({errors: data.messages, fieldsErrors: data.fieldsErrors})\r\n}\r\n\r\nexport const handleAsyncServerNetworkError = (error: AxiosError,\r\n                                              thunkAPI: ThunkAPIType,\r\n                                              showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appActions.setAppError({error: error.message ? error.message : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n\r\n    return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n}","import {todoApi} from '../../api/todolist-api';\r\nimport {RequestStatusType} from '../Application/app-reducer';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {appActions} from '../CommonActions/App';\r\nimport {ThunkError} from '../../utils/types';\r\nimport {TodolistType} from '../../api/types';\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from '../../utils/error-utils';\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nexport const fetchTodolistsTC = createAsyncThunk<{ todolists: TodolistType[] }, undefined, ThunkError>('todolists/fetchTodolists', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todoApi.getTodos();\r\n\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {todolists: res.data}\r\n\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nexport const deleteTodolistTC = createAsyncThunk<{ id: string }, string, ThunkError>('todolists/removeTodolist', async (todolistId, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    thunkAPI.dispatch(changeTodolistEntityStatus({todolistId, entityStatus: 'loading'}))\r\n    try {\r\n        const res = await todoApi.deleteTodo(todolistId)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {id: todolistId}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI, false)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI, false)\r\n    }\r\n})\r\n\r\nexport const createTodolistTC  = createAsyncThunk<{ todolist: TodolistType }, string, ThunkError>\r\n('todolists/createTodolist', async (title, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todoApi.createTodo(title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todolist: res.data.data.item}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI, false)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI, false)\r\n    }\r\n})\r\n\r\nexport const updateTodolistTitleTC = createAsyncThunk('todolists/changeTodolistTitle', async (param: { id: string, title: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todoApi.updateTodoTitle(param.id, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {id: param.id, title: param.title}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI, false)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTodolistsTC,\r\n    deleteTodolistTC,\r\n    createTodolistTC,\r\n    updateTodolistTitleTC\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilter(state, action: PayloadAction<{ todoListID: string, newFilterValue: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoListID);\r\n            state[index].filter = action.payload.newFilterValue;\r\n        },\r\n        changeTodolistEntityStatus(state, action: PayloadAction<{ todolistId: string, entityStatus: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId);\r\n            state[index].entityStatus = action.payload.entityStatus;\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n                return action.payload.todolists.map((tl) => ({...tl, filter: 'All', entityStatus: 'idle'}))\r\n            })\r\n            .addCase(deleteTodolistTC.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                if (index > -1) {\r\n                    state.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(createTodolistTC.fulfilled, (state, action) => {\r\n                state.unshift({...action.payload.todolist, filter: 'All', entityStatus: 'idle'})\r\n            })\r\n            .addCase(updateTodolistTitleTC.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                state[index].title = action.payload.title\r\n            })\r\n    }\r\n})\r\n\r\n\r\n\r\n\r\nexport const {changeTodolistFilter, changeTodolistEntityStatus} = slice.actions\r\n\r\n//types\r\nexport type FilterValuesType = 'All' | 'Active' | 'Completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType,\r\n    entityStatus: RequestStatusType\r\n};\r\n\r\n\r\n//Thunks\r\n// export const fetchTodolistsTC = () =>\r\n//     (dispatch: Dispatch) => {\r\n//         dispatch(setAppStatusAC({status: 'loading'}))\r\n//         todoApi.getTodos()\r\n//             .then(res => {\r\n//                 dispatch(setTodolistsAC({todolists: res.data}))\r\n//                 dispatch(setAppStatusAC({status: 'succeeded'}))\r\n//             })\r\n//             .catch((error) => {\r\n//                 handleServerNetworkError(error, dispatch)\r\n//             })\r\n//     }\r\n// export const deleteTodolistTC = (todolistId: string) =>\r\n//     (dispatch: Dispatch) => {\r\n//         dispatch(setAppStatusAC({status: 'loading'}))\r\n//         dispatch(changeTodolistEntityStatusAC({todolistId, entityStatus: 'loading'}))\r\n//         todoApi.deleteTodo(todolistId)\r\n//             .then(res => {\r\n//                 if (res.data.resultCode === 0) {\r\n//                     dispatch(removeTodolistAC({todoListID: todolistId}))\r\n//                     dispatch(setAppStatusAC({status: 'succeeded'}))\r\n//                 } else {\r\n//                     handleServerAppError(res.data, dispatch)\r\n//                 }\r\n//             })\r\n//             .catch((error) => {\r\n//                 handleServerNetworkError(error, dispatch)\r\n//             })\r\n//     }\r\n// export const createTodolistTC = (title: string) =>\r\n//     (dispatch: Dispatch) => {\r\n//         dispatch(setAppStatusAC({status: 'loading'}))\r\n//         todoApi.createTodo(title)\r\n//             .then(res => {\r\n//                 if (res.data.resultCode === 0) {\r\n//                     dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n//                     dispatch(setAppStatusAC({status: 'succeeded'}))\r\n//                 } else {\r\n//                     handleServerAppError(res.data, dispatch)\r\n//                 }\r\n//             })\r\n//             .catch((error) => {\r\n//                 handleServerNetworkError(error, dispatch)\r\n//             })\r\n//     }\r\n// export const updateTodolistTitleTC = (title: string, todolistId: string) =>\r\n//     (dispatch: Dispatch) => {\r\n//         dispatch(setAppStatusAC({status: 'loading'}))\r\n//         todoApi.updateTodoTitle(todolistId, title)\r\n//             .then((res) => {\r\n//                 if (res.data.resultCode === 0) {\r\n//                     dispatch(changeTodoListTitleAC({title, todoListID: todolistId}))\r\n//                     dispatch(setAppStatusAC({status: 'succeeded'}))\r\n//                 } else {\r\n//                     handleServerAppError(res.data, dispatch)\r\n//                 }\r\n//             })\r\n//             .catch((error) => {\r\n//                 handleServerNetworkError(error, dispatch)\r\n//             })\r\n//     }","import {TaskPriorities, TaskStatuses, TaskType, UpdateTaskModelType} from '../../api/types';\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError,} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AppRootStateType, ThunkError} from '../../utils/types';\r\nimport {appActions} from \"../CommonActions/App\";\r\nimport { todoApi } from '../../api/todolist-api';\r\nimport {asyncActions as asyncTodolistsActions} from './todolists-reducer'\r\n\r\n\r\nconst initialState: TasksStateType = {};\r\n\r\nexport const fetchTasks = createAsyncThunk<{ tasks: TaskType[], todolistId: string }, string, ThunkError>(\r\n    'tasks/fetchTasks',\r\n    async (todolistId: string, thunkAPI) => {\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await todoApi.getTasks(todolistId)\r\n            const tasks = res.data.items\r\n            thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n\r\n            return {tasks, todolistId}\r\n        } catch (error) {\r\n            return handleAsyncServerNetworkError(error, thunkAPI)\r\n        }\r\n    })\r\nexport const removeTask = createAsyncThunk<{ taskId: string, todolistId: string }, { taskId: string, todolistId: string }, ThunkError>(\r\n    'tasks/removeTask',\r\n    async (param, thunkAPI) => {\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n        try {\r\n            await todoApi.deleteTask(param.todolistId, param.taskId)\r\n            thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n            return {taskId: param.taskId, todolistId: param.todolistId}\r\n        } catch (error) {\r\n            return handleAsyncServerNetworkError(error, thunkAPI)\r\n        }\r\n    })\r\nexport const createTask = createAsyncThunk<TaskType, { title: string, todolistId: string }, ThunkError>(\r\n    'tasks/createTask',\r\n    async (param, thunkAPI) => {\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await todoApi.createTask(param.todolistId, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n                return res.data.data.item\r\n            } else {\r\n                return handleAsyncServerAppError(res.data, thunkAPI, false)\r\n            }\r\n        } catch (err) {\r\n            return handleAsyncServerNetworkError(err, thunkAPI, false)\r\n        }\r\n    })\r\n\r\nexport const updateTask = createAsyncThunk('tasks/updateTask', async (param: { taskId: string, model: UpdateDomainTaskModelType, todolistId: string },\r\n                                                                      thunkAPI) => {\r\n    const state = thunkAPI.getState() as AppRootStateType;\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue('task not found in the state')\r\n    }\r\n\r\n    if (task) {\r\n        const apiModel: UpdateTaskModelType = {\r\n            title: task.title,\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            status: task.status,\r\n            ...param.model\r\n        }\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n\r\n        try {\r\n            const res = await todoApi.updateTask(param.todolistId, param.taskId, apiModel)\r\n\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n                return param\r\n            } else {\r\n                return handleAsyncServerAppError(res.data, thunkAPI)\r\n            }\r\n        } catch (error) {\r\n            return handleAsyncServerNetworkError(error, thunkAPI)\r\n        }\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTasks,\r\n    removeTask,\r\n    createTask,\r\n    updateTask\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(asyncTodolistsActions.createTodolistTC.fulfilled, (state, action) => {\r\n                state[action.payload.todolist.id] = []\r\n            })\r\n            .addCase(asyncTodolistsActions.deleteTodolistTC.fulfilled, (state, action) => {\r\n                delete state[action.payload.id]\r\n            })\r\n            .addCase(asyncTodolistsActions.fetchTodolistsTC.fulfilled, (state, action) => {\r\n                action.payload.todolists.forEach(tl => {\r\n                    state[tl.id] = []\r\n                })\r\n            })\r\n            .addCase(fetchTasks.fulfilled, (state, action) => {\r\n                state[action.payload.todolistId] = action.payload.tasks\r\n            })\r\n            .addCase(removeTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId];\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n                if (index > -1) {\r\n                    tasks.splice(index, 1);\r\n                }\r\n            })\r\n            .addCase(createTask.fulfilled, (state, action) => {\r\n                state[action.payload.todoListId].unshift(action.payload)\r\n            })\r\n            .addCase(updateTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.model}\r\n                }\r\n            })\r\n    }\r\n})\r\n\r\n\r\n//types\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n","import React, {KeyboardEvent, ChangeEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\nexport type AddItemFormSubmitHelperType = { setError: (error: string) => void, setTitle: (title: string) => void}\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string, helper: AddItemFormSubmitHelperType) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm:React.FC<AddItemFormPropsType> = React.memo(({addItem, disabled=false}) => {\r\n\r\n    const [title, setTitle] = useState<string>('');\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n\r\n    const addItemHandler = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            addItem(trimmedTitle, {setError, setTitle});\r\n        } else {\r\n            setError('Title is required!')\r\n        }\r\n        setTitle('');\r\n    };\r\n\r\n    const onChangeInputHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        error && setError(null);\r\n        setTitle(e.currentTarget.value);\r\n    };\r\n\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        error && setError(null);\r\n        if (e.key === 'Enter') {\r\n            addItemHandler();\r\n        }\r\n    };\r\n    return (\r\n        <div>\r\n            <TextField\r\n                disabled={disabled}\r\n                variant={'outlined'}\r\n                value={title}\r\n                onKeyPress={onKeyPressAddItem}\r\n                onChange={onChangeInputHandler}\r\n                label={'Title'}\r\n                error={!!error}\r\n                helperText={error}/>\r\n\r\n            <IconButton onClick={addItemHandler} color={'primary'} disabled={disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = React.memo(({disabled = false, ...props}) => {\r\n    console.log('EditableSpan called')\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const onEditMode = () => {\r\n        if (!disabled) {\r\n            setEditMode(true);\r\n        }\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false);\r\n        props.changeTitle(title);\r\n    };\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    }\r\n\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                color={'primary'}\r\n                variant={'standard'}\r\n                value={title}\r\n                autoFocus\r\n                onBlur={offEditMode}\r\n                onChange={changeTitle}/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n})\r\n\r\nexport default EditableSpan;","import {useDispatch} from 'react-redux'\r\nimport {AppDispatchType} from './types'\r\nimport {ActionCreatorsMapObject, bindActionCreators} from 'redux'\r\nimport {useMemo} from 'react'\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject<any>>(actions: T) {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const boundActions = useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [])\r\n\r\n    return boundActions\r\n}","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox, IconButton} from '@material-ui/core';\r\nimport EditableSpan from '../../../../components/EditableSpan/EditableSpan';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TaskStatuses, TaskType} from '../../../../api/types';\r\nimport {tasksActions} from \"../../index\";\r\nimport { useActions } from '../../../../utils/redux-utils';\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const {updateTask, removeTask} = useActions(tasksActions)\r\n\r\n    const onClickHandler = useCallback(() => removeTask({taskId: props.task.id, todolistId: props.todolistId}),\r\n        [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        updateTask({\r\n            taskId: props.task.id,\r\n            todolistId: props.todolistId,\r\n            model: {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New},\r\n        })\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((title: string) => {\r\n        updateTask({\r\n            taskId: props.task.id,\r\n            todolistId: props.todolistId,\r\n            model: {title},\r\n        })\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return (\r\n        <li key={props.task.id}>\r\n            <Checkbox checked={props.task.status === TaskStatuses.Completed} onChange={onChangeHandler} color={'primary'}/>\r\n            <EditableSpan title={props.task.title} changeTitle={onTitleChangeHandler}/>\r\n            <IconButton onClick={onClickHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </li>\r\n    );\r\n});\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from '../../../components/AddItemForm/AddItemForm';\r\nimport EditableSpan from '../../../components/EditableSpan/EditableSpan';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from './Task/Task';\r\nimport {TaskStatuses, TaskType} from '../../../api/types';\r\nimport {FilterValuesType, TodolistDomainType, updateTodolistTitleTC} from '../todolists-reducer';\r\nimport {tasksActions, todolistsActions} from \"../index\";\r\nimport {useActions, useAppDispatch} from \"../../../utils/redux-utils\";\r\nimport { PropTypes } from '@material-ui/core';\r\n\r\n\r\ntype TodoListPropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    demo?: boolean\r\n};\r\n\r\n\r\nexport const TodoList = React.memo(({demo = false, ...props}: TodoListPropsType) => {\r\n    const {fetchTasks} = useActions(tasksActions)\r\n    const {changeTodolistFilter, deleteTodolistTC, updateTodolistTitleTC} = useActions(todolistsActions)\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        fetchTasks(props.todolist.id);\r\n    }, [])\r\n\r\n    function getTasksForTodoList(): Array<TaskType> {\r\n        switch (props.todolist.filter) {\r\n            case 'Active':\r\n                return props.tasks.filter(t => t.status === TaskStatuses.New)\r\n            case 'Completed':\r\n                return props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n            default:\r\n                return props.tasks\r\n        }\r\n    }\r\n\r\n    const addTaskCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n\r\n        let thunk = tasksActions.createTask({title: title, todolistId: props.todolist.id})\r\n        const resultAction = await dispatch(thunk);\r\n\r\n        if (tasksActions.createTask.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occured')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n\r\n    }, [props.todolist.id])\r\n\r\n\r\n    const removeTodoList = useCallback(() => {\r\n        deleteTodolistTC(props.todolist.id)\r\n    }, [props.todolist.id]);\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        updateTodolistTitleTC({id: props.todolist.id, title: title})\r\n    }, [props.todolist.id])\r\n\r\n    const onFilterButtonClickHandler = useCallback((filter: FilterValuesType) => changeTodolistFilter({\r\n        todoListID: props.todolist.id,\r\n        newFilterValue: filter\r\n    }), [props.todolist.id])\r\n\r\n    const styleButton = {\r\n        marginRight: '5px'\r\n    };\r\n\r\n    const renderFilterButton = (buttonFilter: FilterValuesType,\r\n                                color: PropTypes.Color,\r\n                                text: string) => {\r\n        return <Button variant={props.todolist.filter === buttonFilter ? 'outlined' : 'text'}\r\n                       onClick={() => onFilterButtonClickHandler(buttonFilter)}\r\n                       color={color}>{text}\r\n        </Button>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.todolist.title} changeTitle={changeTodolistTitle}/>\r\n                <IconButton onClick={removeTodoList} disabled={props.todolist.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTaskCallback} disabled={props.todolist.entityStatus === 'loading'}/>\r\n            <ul style={{listStyle: 'none', padding: '0px'}}>\r\n                {getTasksForTodoList().map(t => {\r\n                    return (<Task key={t.id}\r\n                                  task={t}\r\n                                  todolistId={props.todolist.id}/>)\r\n                })\r\n                }\r\n                {!getTasksForTodoList().length && <div style={{padding: '10px', color: 'grey'}}>No task</div>}\r\n            </ul>\r\n            <div style = {{padding: '10px'}}>\r\n                {renderFilterButton('All', 'default', 'All')}\r\n                {renderFilterButton('Active', 'primary', 'Active')}\r\n                {renderFilterButton('Completed', 'secondary', 'Completed')}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n","import {AppRootStateType} from '../../utils/types'\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType) => state.auth.isLoggedIn\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {TodolistDomainType} from './todolists-reducer';\r\nimport {useSelector} from 'react-redux';\r\nimport {TasksStateType} from './tasks-reducer';\r\nimport {Grid, Paper} from '@material-ui/core';\r\nimport {TodoList} from './Todolist/TodoList';\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from '../../utils/types';\r\nimport {selectIsLoggedIn} from \"../Auth/selectors\";\r\nimport {useActions, useAppDispatch} from \"../../utils/redux-utils\";\r\nimport {todolistsActions} from \"./index\";\r\n\r\ntype TodolistsPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\n\r\nexport const TodolistsList: React.FC<TodolistsPropsType> = ({demo = false, ...props}) => {\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        fetchTodolistsTC();\r\n    }, [])\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists);\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks);\r\n    const isLoggedIn = useSelector(selectIsLoggedIn);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const {fetchTodolistsTC} = useActions(todolistsActions)\r\n\r\n    const addTodolistCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n            let thunk = todolistsActions.createTodolistTC(title)\r\n            const resultAction = await dispatch(thunk)\r\n\r\n            if (todolistsActions.createTodolistTC.rejected.match(resultAction)) {\r\n                if (resultAction.payload?.errors?.length) {\r\n                    const errorMessage = resultAction.payload?.errors[0]\r\n                    helper.setError(errorMessage)\r\n                } else {\r\n                    helper.setError('Some error occured')\r\n                }\r\n            } else {\r\n                helper.setTitle('')\r\n            }\r\n        }, []\r\n    )\r\n\r\n\r\n    const todolistComponents = todoLists.map(tl => {\r\n        let allTodolistTasks = tasks[tl.id];\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={6} style={{padding: '0 15px 15px 15px'}}>\r\n                    <TodoList\r\n                        key={tl.id}\r\n                        todolist={tl}\r\n                        tasks={allTodolistTasks}\r\n                        demo={demo}/>\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '20px 0px'}}>\r\n                <AddItemForm addItem={addTodolistCallback}/>\r\n            </Grid>\r\n            <Grid container style={{padding: '20px 0px'}} spacing={3}>\r\n                {todolistComponents}\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import {asyncActions as todolistsAsyncActions, slice as todolistsSlice} from './todolists-reducer'\r\nimport {asyncActions as tasksAsyncActions, slice as tasksSlice} from './tasks-reducer'\r\nimport { TodolistsList } from './ToodolistsList'\r\n\r\n\r\nconst todolistsActions = {\r\n    ...todolistsAsyncActions,\r\n    ...todolistsSlice.actions\r\n}\r\nconst tasksActions = {\r\n    ...tasksAsyncActions,\r\n    ...tasksSlice.actions\r\n}\r\n\r\nconst todolistsReducer  = todolistsSlice.reducer\r\nconst tasksReducer  = tasksSlice.reducer\r\n\r\nexport {\r\n    tasksActions,\r\n    todolistsActions,\r\n    TodolistsList,\r\n    todolistsReducer,\r\n    tasksReducer\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from \"../../utils/types\";\r\nimport { useActions } from '../../utils/redux-utils';\r\nimport { appActions } from '../../features/CommonActions/App';\r\n\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n   const {setAppError} = useActions(appActions);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const isOpen = error !== null;\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        setAppError({error: null})\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {authApi} from \"../../api/todolist-api\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {FieldErrorType, LoginParamsType} from '../../api/types';\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from \"../../utils/error-utils\";\r\nimport {appActions} from \"../CommonActions/App\";\r\n\r\nconst {setAppStatus} = appActions;\r\n\r\n\r\nexport const login = createAsyncThunk<undefined, LoginParamsType,\r\n    { rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType> } }>('auth/login', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const response = await authApi.login(param);\r\n        if (response.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {isLoggedIn: true};\r\n        } else {\r\n            return handleAsyncServerAppError(response.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const logout = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authApi.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    login,\r\n    logout\r\n}\r\n\r\n\r\nexport const slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value;\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(login.fulfilled, (state) => {\r\n                state.isLoggedIn = true;\r\n            })\r\n            .addCase(logout.fulfilled, (state) => {\r\n                state.isLoggedIn = false\r\n            })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer;\r\nexport const {setIsLoggedIn} = slice.actions;\r\n\r\n\r\n\r\n// thunks\r\n\r\n// export const _loginTC = (data: LoginParamsType) => async (dispatch: Dispatch) => {\r\n//     dispatch(setAppStatusAC({status: 'loading'}))\r\n//     try {\r\n//         const response = await authApi.login(data);\r\n//         if (response.data.resultCode === 0) {\r\n//             dispatch(setIsLoggedInAC({value: true}));\r\n//             dispatch(setAppStatusAC({status: 'succeeded'}))\r\n//         } else {\r\n//             handleServerAppError(response.data, dispatch);\r\n//         }\r\n//     } catch(error) {\r\n//         handleServerAppError(error, dispatch)\r\n//     }\r\n// }\r\n\r\n// export const logOutTC = () => async (dispatch: Dispatch) => {\r\n//     dispatch(setAppStatus({status: 'loading'}))\r\n//     try {\r\n//         const response = await authApi.logout();\r\n//         if (response.data.resultCode === 0) {\r\n//             dispatch(setIsLoggedInAC({value: false}));\r\n//             dispatch(setAppStatus({status: 'succeeded'}))\r\n//         } else {\r\n//             handleServerAppError(response.data, dispatch);\r\n//         }\r\n//     } catch (error) {\r\n//         handleServerAppError(error, dispatch)\r\n//     }\r\n// }\r\n\r\n\r\n","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {FormikHelpers, useFormik} from 'formik'\r\nimport {useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {selectIsLoggedIn} from \"./selectors\";\r\nimport {useAppDispatch} from \"../../utils/redux-utils\";\r\nimport {authActions} from \"./index\";\r\nimport { login } from './authReducer';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\ntype FormValuesType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useAppDispatch();\r\n    const isLoggedIn = useSelector(selectIsLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: async (values, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            const resultAction = await dispatch(authActions.login(values));\r\n\r\n            if (login.rejected.match(resultAction)) {\r\n                if (resultAction.payload?.fieldsErrors?.length) {\r\n                    const error = resultAction.payload?.fieldsErrors[0];\r\n                    formikHelpers.setFieldError(error.field, error.error);\r\n                }\r\n            }\r\n            // formik.resetForm();\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Password is required!'\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'Password must be more than 4 characters!'\r\n            }\r\n            return errors;\r\n        }\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched && formik.errors.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched && formik.errors.password ?\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox {...formik.getFieldProps('rememberMe')}/>}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import * as authSelectors from './selectors'\r\nimport {Login} from './Login'\r\nimport {asyncActions, slice} from './authReducer'\r\n\r\nconst authActions = {\r\n    ...asyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nconst authReducer = slice.reducer\r\n\r\nexport {\r\n    authSelectors,\r\n    Login,\r\n    authActions,\r\n    authReducer\r\n}","import {AppRootStateType} from '../../utils/types'\r\n\r\nexport const selectStatus = (state: AppRootStateType) => state.app.status\r\nexport const selectIsInitialized = (state: AppRootStateType) => state.app.isInitialized\r\n","import {authApi} from \"../../api/todolist-api\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {authActions} from \"../Auth\";\r\nimport {appActions} from \"../CommonActions/App\";\r\n\r\n\r\nconst initializeApp = createAsyncThunk('app/initializeApp', async (param, {dispatch}) => {\r\n    const res = await authApi.autMe();\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(authActions.setIsLoggedIn({value: true}))\r\n    } else {\r\n\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    initializeApp\r\n}\r\n\r\n\r\nexport const slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle',\r\n        error: null,\r\n        isInitialized: false\r\n    } as InitialStateType,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(initializeApp.fulfilled, (state, action) => {\r\n                state.isInitialized = true\r\n            })\r\n            .addCase(appActions.setAppStatus, (state, action) => {\r\n                state.status = action.payload.status\r\n            })\r\n            .addCase(appActions.setAppError, (state, action) => {\r\n                state.error = action.payload.error\r\n            })\r\n    }\r\n})\r\n\r\n\r\n//types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\n\r\n\r\n","import * as appSelectors from './selectors'\r\nimport {RequestStatusType as T1, slice} from './app-reducer'\r\nimport {asyncActions} from './app-reducer'\r\n\r\nconst appReducer = slice.reducer\r\nconst actions = slice.actions\r\n\r\nconst appActions = {\r\n    ...actions,\r\n    ...asyncActions\r\n}\r\nexport type RequestStatusType = T1\r\n\r\nexport {\r\n    appSelectors,\r\n    appReducer,\r\n    appActions\r\n}","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {AppBar, Button, Container, IconButton, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {useSelector} from 'react-redux';\r\nimport {TodolistsList} from '../features/TodolistsList';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackBar/ErrorSnackBar';\r\nimport {NavLink, Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {Login} from \"../features/Auth\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport {useCallback} from 'react';\r\nimport {selectIsInitialized, selectStatus} from \"../features/Application/selectors\";\r\nimport {authActions, authSelectors} from \"../features/Auth\";\r\nimport {appActions} from \"../features/Application\";\r\nimport {useActions} from \"../utils/redux-utils\";\r\n\r\ntype AppPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nconst App: React.FC<AppPropsType> = ({demo = false, ...props}) => {\r\n\r\n    const status = useSelector(selectStatus);\r\n    const isInitialized = useSelector(selectIsInitialized);\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn);\r\n\r\n    const {logout} = useActions(authActions)\r\n    const {initializeApp} = useActions(appActions)\r\n\r\n    useEffect(() => {\r\n        if (!demo) {\r\n            initializeApp()\r\n        }\r\n    }, []);\r\n\r\n\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        logout()\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{display: 'flex', justifyContent: 'space-between'}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoList\r\n                    </Typography>\r\n                    <NavLink to={\"/login\"}>\r\n                        {!isLoggedIn && <Button variant={'outlined'} color=\"inherit\">Login</Button>}\r\n                    </NavLink>\r\n                    {isLoggedIn && <Button variant={'outlined'} color=\"inherit\" onClick={logoutHandler}>LogOut</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress color={\"secondary\"}/>}\r\n            </AppBar>\r\n            <Container fixed style={{padding: '20px 0px'}}>\r\n                <Switch>\r\n                    <Route path={\"/\"} exact render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={\"/login\"} render={() => <Login/>}/>\r\n                    <Route path={\"/404\"} render={() => <div>404 page not found</div>}/>\r\n                    <Redirect from={\"*\"} to={\"/404\"}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {combineReducers} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {appReducer} from '../features/Application';\r\nimport {authReducer} from \"../features/Auth/authReducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {tasksReducer, todolistsReducer} from \"../features/TodolistsList\";\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\n//export const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk),\r\n})\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {BrowserRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App/>\r\n        </BrowserRouter>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}